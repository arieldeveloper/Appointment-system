{"ast":null,"code":"var _jsxFileName = \"/Users/arielchouminov/Desktop/web-app/client/src/pages/home.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport updateDailyTimetable from \"../components/booking\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allMonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\nfunction HomePage() {\n  _s();\n\n  const [value, setValue] = useState(new Date());\n  const [appointments, setAppointments] = useState(null);\n  const [slots, setSlots] = useState({\n    \"3:00\": \"available\",\n    \"4:00\": \"available\",\n    \"5:00\": \"available\"\n  });\n  const [selectedValue, setSelectedValue] = useState(\"Nothing Selected\");\n\n  const bookAppointment = () => {\n    console.log('booked appointment for ' + getDateString(selectedValue));\n  };\n\n  const getDateString = date => {\n    let dateString = date.toString().split(' ').splice(0, 4).join(' ');\n    return dateString;\n  };\n\n  const handleInput = e => {\n    let btnValue = e.target.value;\n    console.log(btnValue);\n    setSelectedValue(getDateString(btnValue));\n  }; //Import Data from MongoDB\n\n\n  useEffect(() => {\n    getAppointments();\n\n    async function getAppointments() {\n      const apiURL = \"api/appointments\";\n      const response = await fetch(apiURL);\n      const data = await response.json();\n      const updatedData = updateDailyTimetable(9, 17, 60, value.getUTCDate(), value.getUTCMonth() + 1, value.getUTCFullYear(), data);\n      setAppointments(updatedData);\n    }\n  }); //\n\n  return [/*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Home\", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/users\",\n        children: \" Users \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: setValue,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" Showing Appointments For: \", getDateString(value), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), appointments && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: appointments.map((app, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: handleInput,\n        value: app,\n        children: [allMonths[app.month - 1], \" \", app.day, \", \", app.year, \"at \", app.hour, \":\", \"0\" + app.minute, \", Availability: \", app.available.toString(), \" } \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this) // <h5>{ allMonths[app.month - 1] } { app.day }, { app.year }\n      // at {app.hour }:{ \"0\" + app.minute },\n      //     Availability: {app.available.toString()} }\n      // </h5>\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" Appointment Selected: \", selectedValue, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bookAppointment,\n      children: \"Book Appointment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this)];\n}\n\n_s(HomePage, \"djImLkglsU1ExldVQo1ER2WAlZo=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/arielchouminov/Desktop/web-app/client/src/pages/home.js"],"names":["React","useState","useEffect","Link","Calendar","updateDailyTimetable","allMonths","HomePage","value","setValue","Date","appointments","setAppointments","slots","setSlots","selectedValue","setSelectedValue","bookAppointment","console","log","getDateString","date","dateString","toString","split","splice","join","handleInput","e","btnValue","target","getAppointments","apiURL","response","fetch","data","json","updatedData","getUTCDate","getUTCMonth","getUTCFullYear","map","app","index","month","day","year","hour","minute","available"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport updateDailyTimetable from \"../components/booking\";\n\nlet allMonths = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nfunction HomePage() {\n    const [value, setValue] = useState(new Date());\n    const [appointments, setAppointments] = useState(null);\n    const [slots, setSlots] = useState({ \"3:00\": \"available\", \"4:00\": \"available\", \"5:00\": \"available\"})\n    const [selectedValue, setSelectedValue] = useState(\"Nothing Selected\");\n\n    const bookAppointment = () => {\n        console.log('booked appointment for ' + getDateString(selectedValue));\n    }\n    const getDateString = (date) => {\n        let dateString = date.toString().split(' ').splice(0, 4).join(' ');\n        return dateString;\n    }\n\n    const handleInput = (e) => {\n        let btnValue = e.target.value;\n        console.log(btnValue);\n        setSelectedValue(getDateString(btnValue));\n    }\n\n    //Import Data from MongoDB\n    useEffect(() => {\n\n        getAppointments();\n\n        async function getAppointments() {\n            const apiURL = \"api/appointments\"\n            const response = await fetch(apiURL);\n            const data = await response.json();\n            const updatedData = updateDailyTimetable(9, 17, 60,\n                value.getUTCDate(), value.getUTCMonth() + 1, value.getUTCFullYear(), data);\n            setAppointments(updatedData);\n        }\n\n    });\n\n    //\n    return (\n        [<div>\n            <h1>Home\n                <Link to=\"/users\"> Users </Link></h1>\n\n            <Calendar onChange={ setValue }\n                      value={value}/>\n\n            <h3> Showing Appointments For: { getDateString(value) } </h3>\n            { appointments && (\n                <div>\n                    {appointments.map((app, index) => (\n                        <li onClick={handleInput} value={app}>{ allMonths[app.month - 1] } { app.day }, { app.year }\n                            at {app.hour }:{ \"0\" + app.minute },\n                            Availability: {app.available.toString()} } </li>\n\n                        // <h5>{ allMonths[app.month - 1] } { app.day }, { app.year }\n                        // at {app.hour }:{ \"0\" + app.minute },\n                        //     Availability: {app.available.toString()} }\n                        // </h5>\n                    ))}\n                </div>\n            ) }\n\n            <h4> Appointment Selected: { selectedValue } </h4>\n            <button onClick={bookAppointment}>Book Appointment</button>\n\n        </div>]\n    );\n}\n\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}