{"ast":null,"code":"// All functions pertaining to the appointment system\nfunction generateTimetable(day, month, year, startTime, endTime, interval) {\n  // Creates an time table slots given a start time, end time and intervals\n  // startTime > 0 && endTime < 24, intervals < 60 (interval given in minutes)\n  // ex. generateTimetable(3, 5, 60);\n  // [{ date: Date, available: false}, { date: Date, available: true}, { date: Date, available: true}]\n  let timeTableObj = [];\n\n  for (var hour = startTime; hour < endTime + 1; hour++) {\n    for (var minute = 0; minute < 60 / interval * interval; minute += interval) {\n      let newObj = {};\n      const dateReturned = new Date(year, month - 1, day, hour, minute);\n      newObj.date = dateReturned;\n      newObj.available = true;\n      timeTableObj.push(newObj);\n    }\n  }\n\n  return timeTableObj;\n}\n\nfunction getDaysBookedSlots(day, month, year, data) {\n  // Returns the given days booked slots as objects inside an array\n  var newArray = data.filter(function (appointment) {\n    return appointment.day === day && appointment.month === month && appointment.year === year;\n  });\n  return newArray;\n}\n\nfunction updateDailyTimetable(startTime, endTime, interval, day, month, year, data) {\n  // Example call: console.log(updateDailyTimetable(5, 17, 30,1,1, 2021, testData));\n  // Populates a newly generated timetable with the already booked slots\n  let newTimeTable = generateTimetable(day, month, year, startTime, endTime, interval); // generate a new table\n  // returns all the booked time slots for the current day in JSON\n\n  let bookedTimes = getDaysBookedSlots(day, month, year, data); // Loop through all avaiable slots and make them unavailable based on booked time slots\n\n  for (var i = 0; i < newTimeTable.length; i++) {\n    for (var j = 0; j < bookedTimes.length; j++) {\n      if (bookedTimes[j].hour === newTimeTable[i].date.getHours() && bookedTimes[j].minute === newTimeTable[i].date.getUTCMinutes()) {\n        // slot is already booked\n        newTimeTable[i].available = false;\n      }\n    }\n  }\n\n  return newTimeTable;\n}\n\nexport default updateDailyTimetable;","map":{"version":3,"sources":["/Users/arielchouminov/Desktop/web-app/client/src/components/booking.js"],"names":["generateTimetable","day","month","year","startTime","endTime","interval","timeTableObj","hour","minute","newObj","dateReturned","Date","date","available","push","getDaysBookedSlots","data","newArray","filter","appointment","updateDailyTimetable","newTimeTable","bookedTimes","i","length","j","getHours","getUTCMinutes"],"mappings":"AAAA;AACA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6CC,SAA7C,EAAwDC,OAAxD,EAAiEC,QAAjE,EAA2E;AACvE;AACA;AACA;AACA;AACA,MAAIC,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,IAAI,GAAGJ,SAAhB,EAA2BI,IAAI,GAAIH,OAAO,GAAG,CAA7C,EAAiDG,IAAI,EAArD,EAAyD;AACrD,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAI,KAAKH,QAAN,GAAkBA,QAAhD,EAA0DG,MAAM,IAAIH,QAApE,EAA8E;AAC1E,UAAII,MAAM,GAAG,EAAb;AACA,YAAMC,YAAY,GAAG,IAAIC,IAAJ,CAAST,IAAT,EAAeD,KAAK,GAAG,CAAvB,EAA0BD,GAA1B,EAA+BO,IAA/B,EAAqCC,MAArC,CAArB;AACAC,MAAAA,MAAM,CAACG,IAAP,GAAcF,YAAd;AACAD,MAAAA,MAAM,CAACI,SAAP,GAAmB,IAAnB;AACAP,MAAAA,YAAY,CAACQ,IAAb,CAAkBL,MAAlB;AACH;AACJ;;AACD,SAAOH,YAAP;AACH;;AAED,SAASS,kBAAT,CAA4Bf,GAA5B,EAAiCC,KAAjC,EAAwCC,IAAxC,EAA8Cc,IAA9C,EAAoD;AAChD;AACA,MAAIC,QAAQ,GAAGD,IAAI,CAACE,MAAL,CAAY,UAAUC,WAAV,EAAuB;AAC9C,WAAQA,WAAW,CAACnB,GAAZ,KAAoBA,GAApB,IAA2BmB,WAAW,CAAClB,KAAZ,KAAsBA,KAAjD,IACDkB,WAAW,CAACjB,IAAZ,KAAqBA,IAD5B;AAEH,GAHc,CAAf;AAIA,SAAOe,QAAP;AACH;;AAGD,SAASG,oBAAT,CAA8BjB,SAA9B,EAAyCC,OAAzC,EAAkDC,QAAlD,EAA4DL,GAA5D,EAAiEC,KAAjE,EAAwEC,IAAxE,EAA8Ec,IAA9E,EAAoF;AAChF;AAEA;AACA,MAAIK,YAAY,GAAGtB,iBAAiB,CAACC,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,EAAuCC,QAAvC,CAApC,CAJgF,CAIM;AAEtF;;AACA,MAAIiB,WAAW,GAAGP,kBAAkB,CAACf,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmBc,IAAnB,CAApC,CAPgF,CAShF;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AACzC,UAAIH,WAAW,CAACG,CAAD,CAAX,CAAelB,IAAf,KAAwBc,YAAY,CAACE,CAAD,CAAZ,CAAgBX,IAAhB,CAAqBc,QAArB,EAAxB,IACAJ,WAAW,CAACG,CAAD,CAAX,CAAejB,MAAf,KAA0Ba,YAAY,CAACE,CAAD,CAAZ,CAAgBX,IAAhB,CAAqBe,aAArB,EAD9B,EACoE;AAChE;AACAN,QAAAA,YAAY,CAACE,CAAD,CAAZ,CAAgBV,SAAhB,GAA4B,KAA5B;AACH;AACJ;AACJ;;AACD,SAAOQ,YAAP;AACC;;AAEL,eAAeD,oBAAf","sourcesContent":["// All functions pertaining to the appointment system\nfunction generateTimetable(day, month, year, startTime, endTime, interval) {\n    // Creates an time table slots given a start time, end time and intervals\n    // startTime > 0 && endTime < 24, intervals < 60 (interval given in minutes)\n    // ex. generateTimetable(3, 5, 60);\n    // [{ date: Date, available: false}, { date: Date, available: true}, { date: Date, available: true}]\n    let timeTableObj = [];\n\n    for (var hour = startTime; hour < (endTime + 1); hour++) {\n        for (var minute = 0; minute < (60 / interval) * interval; minute += interval) {\n            let newObj = {};\n            const dateReturned = new Date(year, month - 1, day, hour, minute);\n            newObj.date = dateReturned;\n            newObj.available = true;\n            timeTableObj.push(newObj);\n        }\n    }\n    return timeTableObj;\n}\n\nfunction getDaysBookedSlots(day, month, year, data) {\n    // Returns the given days booked slots as objects inside an array\n    var newArray = data.filter(function (appointment) {\n        return (appointment.day === day && appointment.month === month\n            && appointment.year === year);\n    });\n    return newArray\n}\n\n\nfunction updateDailyTimetable(startTime, endTime, interval, day, month, year, data) {\n    // Example call: console.log(updateDailyTimetable(5, 17, 30,1,1, 2021, testData));\n\n    // Populates a newly generated timetable with the already booked slots\n    let newTimeTable = generateTimetable(day, month, year, startTime, endTime, interval); // generate a new table\n\n    // returns all the booked time slots for the current day in JSON\n    let bookedTimes = getDaysBookedSlots(day, month, year, data);\n\n    // Loop through all avaiable slots and make them unavailable based on booked time slots\n    for (var i = 0; i < newTimeTable.length; i++) {\n        for (var j = 0; j < bookedTimes.length; j++) {\n            if (bookedTimes[j].hour === newTimeTable[i].date.getHours() &&\n                bookedTimes[j].minute === newTimeTable[i].date.getUTCMinutes()) {\n                // slot is already booked\n                newTimeTable[i].available = false;\n            }\n        }\n    }\n    return newTimeTable;\n    }\n\nexport default updateDailyTimetable;\n\n"]},"metadata":{},"sourceType":"module"}